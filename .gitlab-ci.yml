# SPDX-License-Identifier: FSFAP
# Copyright (C) 2019 John Hsu
# Copyright (C) 2019-2022 Colin B. Macdonald
# Copyright (C) 2021 Peter Lee
# Copyright (C) 2021 Morgan Arnold
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.

# This the CI configuration for Plom

# Issue #1654: This stops multiple pipelines on merge-requests from forks
# But it seems to prevent forks from running their own CI jobs pre-MR
# include:
#   - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

# workflow:
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#     - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
#       when: never
#     - if: '$CI_COMMIT_BRANCH'

image: docker:20.10.12

services:
  - docker:20.10.12-dind

variables:
  DOCKER_DRIVER: overlay2
  IM: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  IM_LATEST: $CI_REGISTRY_IMAGE:latest
  PLOM_NO_SSL_VERIFY: 1
  MYVER: '${CI_PROJECT_NAME:1}'
  MYVERTAG: '${CI_COMMIT_TAG:1}'

stages:
  - static_analysis
  - build
  - test
  - packaging
  - prep
  - release


# Attention maintainers: if you start to see errors in the CI runs like:
#   E: Failed to fetch http://security.ubuntu.com... 404 Not Found [IP: 91...]
# Run with DOCKER_USE_CACHE set to 0, under Pipeline -> Run pipeline
docker-image:
  stage: build
  needs: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo $DOCKER_USE_CACHE
    - >
      if [ "$DOCKER_USE_CACHE" == "1" ]; then
        docker pull $IM_LATEST || true
      fi
    - >
      if [ "$DOCKER_USE_CACHE" == "1" ]; then
        docker build --cache-from $IM_LATEST --tag $IM .
      else
        docker build --tag $IM .
      fi
    - docker push $IM


# Get fast results by running tests in a copy-pasta of the docker-image job
quick-pytests:
  stage: build
  needs: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IM_LATEST || true
    - docker build --cache-from $IM_LATEST --tag $IM .
    - docker run $IM pytest-3 -l --pyargs plom


codespell:
  image: python:3.10
  stage: static_analysis
  before_script:
    - python3 -m pip install codespell
  script:
    - echo $CI_PROJECT_NAME
    - echo $MYVERTAG
    - echo $MYVER
    # temp testing stuff
    - echo "MY_VAR_A=${CI_PROJECT_NAME:1}" >> release_info.env
    - echo "MY_VAR_B=${CI_COMMITT_TAG:1}" >> release_info.env
    - codespell -S "*.png,*.po,.git,*.jpg,*.svg,*.csv" -f -H -x .codespell-ignorelines -I .codespell-ignorewords
  allow_failure: true
  artifacts:
    reports:
      dotenv: release_info.env


# If on main branch, tag earlier image as "latest" (in Gitlab Container Registry)
docker-tag-latest:
  stage: packaging
  needs: ["docker-image"]
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $IM
    - docker tag $IM $IM_LATEST
    - docker push $IM_LATEST
  only:
    - main
    - tags


# If we have a tag, then push to PyPI using TWINE_* env vars
# Debug: `upload -r testpypi`, comment `only`, change and unprotect token
pypi:
  image: $IM
  stage: packaging
  needs: ["docker-image"]
  cache: {}
  script:
    - pip install --upgrade twine wheel setuptools
    - python3 setup.py sdist bdist_wheel
    - python3 -m twine check dist/*
    - python3 -m twine upload dist/*
  only:
    - tags


release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo 'running release_job'
    - echo "Draft of release notes follows (newlines eaten)"
    - cat release_desc.md
    - echo "Just debugging:"
    - echo $MY_VAR_A
    - echo $MY_VAR_B
    - echo $LINKNAME0
    - echo $URL0
    - echo $FILENAME0
    - echo $LINKNAME3
    - echo $URL3
    - echo $FILENAME3
    - echo $LINKNAME4
    - echo $URL4
    - echo $FILENAME4
    - echo $LINKNAME5
    - echo $URL5
    - echo $FILENAME5
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: './release_desc.md'
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'
    milestones:
      # ${CI_COMMIT_TAG:1} might strip the leading v
      - $CI_COMMIT_TAG
    assets:
      links:
        - name: $LINKNAME0
          filepath: "/$FILENAME0"
          url: $URL0
          link_type: "package"
        - name: $LINKNAME3
          filepath: "/$FILENAME3"
          url: $URL3
          link_type: "package"
        - name: $LINKNAME4
          filepath: "/$FILENAME4"
          url: $URL4
          link_type: "package"
        - name: $LINKNAME5
          filepath: "/$FILENAME5"
          url: $URL5
          link_type: "package"
        - name: $OTHER_LINKNAME1
          url: $OTHER_URL1
          link_type: "other"
        - name: $OTHER_LINKNAME2
          url: $OTHER_URL2
          link_type: "other"
        - name: $OTHER_LINKNAME3
          url: $OTHER_URL3
          link_type: "other"


# block release unless tag matches in-source version
tag_matches_ver:
  stage: static_analysis
  image: python:3.10
  rules:
   - if: $CI_COMMIT_TAG
  script:
    - export VER=$(python3 -c "exec(open('plom/version.py').read()); print(__version__)")
    - echo "Extracted version string '$VER'"
    - echo "Now comparing to CI_COMMIT_TAG '$CI_COMMIT_TAG'"
    - echo $VER
    - echo $CI_COMMIT_TAG
    # note reversed logic and extra "v"
    - python3 -c "exit(not 'v$VER' == '$CI_COMMIT_TAG')"


black:
  stage: static_analysis
  image: python:3.10
  before_script:
    - pip3 install "black~=22.3"
  script:
    - black --check --diff .
  allow_failure: true


basic:
  stage: test
  needs: ["docker-image"]
  image: $IM
  script:
    - plom-init


unittests:
  stage: test
  needs: ["docker-image"]
  image: $IM
  script:
    - pytest-3 -l --pyargs plom


# TODO: may consider merging with unittests job above
coverage:
  stage: test
  needs: ["docker-image"]
  image: $IM
  script:
    - pip install pytest pytest-cov coverage[toml]
    - coverage run -m pytest
    - coverage report
    - coverage xml
  artifacts:
    reports:
      cobertura: coverage.xml

# Notes:
# masked out some stuff that deps on tensorflow
doctests:
  stage: test
  needs: ["docker-image"]
  image: $IM
  before_script:
    - pip3 install --upgrade pytest
  script:
    # TODO how to run only doctests?  here we just ignore-glib on "test_*"
    - pytest --version
    - pytest -l --doctest-modules --doctest-continue-on-failure --ignore-glob="*IDReader_TF" --ignore-glob="*digitHunter.py" --ignore-glob="*/test_*.py" plom


pylint:
  stage: test
  needs: ["docker-image"]
  image: $IM
  before_script:
    - python3 -m pip install pylint
  script:
    - pylint plom
  allow_failure: true


flake8:
  stage: test
  needs: ["docker-image"]
  image: $IM
  before_script:
    - python3 -m pip install flake8
  script:
    # show all errors and warnings but don't fail
    - flake8 --exit-zero
    # fail test if any errors here
    - flake8 --select E,W
  allow_failure: true


demoserver:
  stage: test
  needs: ["docker-image"]
  image: $IM
  before_script:
    - apt-get --no-install-recommends --yes install iproute2 psmisc file curl
  script:
    - mkdir demo
    - pushd demo
    - plom-server init
    - plom-server users --demo
    - plom-create new --demo
    - plom-create parse demoSpec.toml
    # Start server
    - ip addr
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - plom-create class --demo -w 1234
    - plom-create make -w 1234
    - plom-solutions extract solutionSpec.toml -w 1234
    - plom-solutions extract --upload -w 1234
    - python3 -m plom.create.exam_scribbler -w 1234
    - plom-scan process -w 4567 fake_scribbled_exams1.pdf
    - plom-scan upload -w 4567 fake_scribbled_exams1.pdf
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams2.pdf
    - plom-scan upload -w 4567 fake_scribbled_exams2.pdf
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams3.pdf
    - plom-scan upload -w 4567 fake_scribbled_exams3.pdf
    - plom-scan status -w 4567
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd


hwdemoserver:
  stage: test
  needs: ["docker-image"]
  image: $IM
  before_script:
    - apt-get --no-install-recommends --yes install iproute2 psmisc file curl
  script:
    - mkdir demo
    - pushd demo
    - plom-server init
    - plom-server users --demo
    - plom-create new --demo
    - plom-create parse demoSpec.toml
    # Start server
    - ip addr
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - export PLOM_USER=user0
    - export PLOM_PASSWORD=0123
    - export PLOM_MANAGER_PASSWORD=1234
    - export PLOM_SCAN_PASSWORD=4567
    - plom-create class --demo
    - plom-create make
    - plom-solutions extract solutionSpec.toml
    - plom-solutions extract --upload
    - plom-hwscan status
    - python3 -m plom.create.homework_scribbler
    # TODO: the actual hwdemo script does more with qstr, semiloose
    - plom-hwscan allbyq -y
    - plom-hwscan missing -y
    - plom-hwscan submitted
    - plom-hwscan submitted -d
    - python3 -m plom.client.randoMarker
    - plom-finish status
    - plom-finish csv
    - A=`cat marks.csv  | wc -l`     # How many lines?
    - echo $A
    - A="$((A-1))"
    - bash -c "[[ $A -le 10 ]]"      # 10 named papers
    - bash -c "[[ $A == 6 ]]"        # hw_scribber makes 4 "semiloose"
    - file marks.csv
    - file marks.csv | grep text
    - plom-finish reassemble
    - B=`ls reassembled/ | wc -l`    # How many files?
    - echo $B
    - bash -c "[[ $B == $A ]]"
    - plom-finish solutions --mark
    - B=`ls solutions/ | wc -l`    # How many files?
    - echo $B
    - bash -c "[[ $B == $A ]]"
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd


fullworkflow:
  stage: test
  needs: ["docker-image"]
  image: $IM
  before_script:
    - apt-get --no-install-recommends --yes install iproute2 psmisc file curl
  script:
    # Build tests
    - mkdir play
    - pushd play
    - plom-server init
    - plom-server users --demo
    - plom-create new
    - plom-create parse
    - python3 -m plom.create.demotools solutions # to get soln pdf copied
    # TODO: override the private seed
    # sed specAndDatabase/verifiedSpec.toml -i -e "s/privateSeed = .*/privateSeed = \"8253996856355501\"/"
    # diff -u specAndDatabase/verifiedSpec.toml ../tmp/resources/verifiedSpec.toml
    # Start server
    - ip addr
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - export PLOM_USER=user0
    - export PLOM_PASSWORD=0123
    - export PLOM_MANAGER_PASSWORD=1234
    - export PLOM_SCAN_PASSWORD=4567
    - plom-create class --demo
    - plom-create make
    - plom-solutions extract solutionSpec.toml
    - plom-solutions extract --upload
    - A=`ls papersToPrint/ | wc -l`  # How many files?
    - bash -c "[[ $A == 20 ]]"       # should be 20
    - python3 -m plom.create.exam_scribbler
    # Scan and upload
    # supposed to fail:
    - if (plom-scan process); then false; else true; fi
    - plom-scan process --demo fake_scribbled_exams1.pdf
    - plom-scan upload -u fake_scribbled_exams1.pdf
    # TODO: I removed some -c lines here...
    - plom-scan status
    - plom-scan process --demo fake_scribbled_exams2.pdf
    - plom-scan upload -u fake_scribbled_exams2.pdf
    - plom-scan status
    - plom-scan process --demo fake_scribbled_exams3.pdf
    - plom-scan upload -u fake_scribbled_exams3.pdf
    - plom-scan status
    ## not supposed to be done yet:
    - if (plom-finish status); then false; else true; fi
    - python3 -m plom.client.randoIDer -s localhost -u user0 -w 0123
    - python3 -m plom.client.randoMarker -s localhost -u user0 -w 0123
    - plom-finish status
    - plom-finish csv
    - A=`cat marks.csv  | wc -l`      # How many lines?
    - echo $A
    - A="$((A-1))"
    - bash -c "[[ $A == 19 ]]"        # b/c 1 page from 1 test is deleted
    - file marks.csv
    - file marks.csv | grep text
    - plom-finish reassemble
    - A=`ls reassembled/ | wc -l`    # How many files?
    - bash -c "[[ $A == 19 ]]" # since 1 test incomplete
    - plom-finish solutions --mark
    - A=`ls solutions/ | wc -l`    # How many files?
    - bash -c "[[ $A == 19 ]]"
    - A=`du -sm reassembled/ | cut -f1`  # Don't regress on issue #627
    - bash -c "[[ $A -lt 40 ]]"          # not more than 10 MB
    - plom-finish webpage --solutions
    - A=`ls codedReturn/ | wc -l`    # How many files (inc soln)?
    - bash -c "[[ $A == 39 ]]"       # 2*(20-1) pdf + 1 html
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd


appstreamValid:
  stage: static_analysis
  image: alpine
  before_script:
    - apk add appstream-glib
  script:
    - appstream-util validate-relax org.plomgrading.PlomClient.metainfo.xml


# TODO: perhaps all deps should be in the docker image?
docs_sphinx:
  stage: test
  needs: ["docker-image"]
  image: $IM
  before_script:
    - apt-get --no-install-recommends --yes install tex-gyre
    - pip install myst-parser sphinx sphinx_rtd_theme
  script:
    - pushd doc
    - ls
    - make html
    - make singlehtml
    - make linkcheck
    - make latexpdf
    - popd
  artifacts:
    paths:
      - doc/build/latex/plom.pdf
      - doc/build/html/
    expire_in: 16 days


# get latest pip deps, doesn't use docker, closer to user install
# allowed to fail (some pip stuff might be new) but we want to know
# TODO: `dnf install python3-opencv`, and `sed` out the setup.py dep
fedora_build:
  stage: build
  needs: []
  image: fedora:35
  allow_failure: true
  before_script:
    - dnf install -y ImageMagick openssl zbar gcc gcc-c++ cmake
          turbojpeg-devel libjpeg-turbo-devel
          latexmk tex-dvipng texlive-scheme-basic
          tex-preview tex-charter tex-exam tex-preprint
          python3-cffi python3-passlib python3-qt5
          python3-jsmin python3-defusedxml python3-yaml
          python3-urllib3 python3-more-itertools
          python3-seaborn python3-aiohttp
          python3-peewee python3-pandas python3-requests-toolbelt
          python3-pip python3-wheel python3-setuptools
          python3-toml python3-weasyprint python3-pillow python3-tqdm python3-appdirs
          python3-pytest
          python3-PyMuPDF python3-scikit-learn
          file python3-file-magic
          iproute
    - pip --version
  script:
    - pip install jpegtran-cffi
    - pip install .
    # First, run the unit tests
    - pytest-3 -l --pyargs plom
    # Build tests
    - mkdir play
    - pushd play
    - plom-server init
    - plom-server users --demo
    - plom-create new
    - plom-create parse
    - python3 -m plom.create.demotools
    - ip addr
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - plom-create class --demo -w 1234
    - plom-create make -w 1234
    - A=`ls papersToPrint/ | wc -l`  # How many files?
    - bash -c "[[ $A == 20 ]]"       # should be 20
    - python3 -m plom.create.exam_scribbler -w 1234
    # Scan and upload
    # supposed to fail:
    - if (plom-scan process); then false; else true; fi
    - plom-scan process -w 4567 fake_scribbled_exams1.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams1.pdf
    # TODO: I removed some -c lines here...
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams2.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams2.pdf
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams3.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams3.pdf
    - plom-scan status -w 4567
    # not supposed to be done yet:
    - if (plom-finish status -w 1234); then false; else true; fi
    - python3 -m plom.client.randoIDer -s localhost -u user0 -w 0123
    - python3 -m plom.client.randoMarker -s localhost -u user0 -w 0123
    - plom-finish status -w 1234
    - plom-finish csv -w 1234
    - A=`cat marks.csv  | wc -l`      # How many lines?
    - echo $A
    - A="$((A-1))"
    - bash -c "[[ $A == 19 ]]"        # b/c 1 page from 1 test is deleted
    - file marks.csv
    - file marks.csv | grep text
    - plom-finish reassemble -w 1234
    - A=`ls reassembled/ | wc -l`    # How many files?
    - bash -c "[[ $A == 19 ]]" # since 1 test incomplete
    - A=`du -sm reassembled/ | cut -f1`  # Don't regress on issue #627
    - bash -c "[[ $A -lt 40 ]]"          # not more than 10 MB
    - plom-finish webpage
    - A=`ls codedReturn/ | wc -l`    # How many files?
    - bash -c "[[ $A == 20 ]]"       # 20-1 pdf + 1 html
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd


# get latest pip deps, doesn't use docker, closer to user install
# allowed to fail (some pip stuff might be new) but we want to know
nodock_newdeps:
  stage: build
  needs: []
  image: ubuntu:21.10
  allow_failure: true
  before_script:
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata curl
    - apt-get --no-install-recommends --yes install
      cmake make g++ imagemagick openssl
      dvipng latexmk texlive-latex-extra texlive-fonts-recommended
      libpango-1.0-0 libpangocairo-1.0-0
      libzbar0
      libjpeg-dev libjpeg-turbo8-dev libturbojpeg0-dev
      libgl1-mesa-glx libsm6 libxrender1
      python3-pytest python3-dev
      python3-pip python3-setuptools python3-wheel
      iproute2 psmisc file python3-magic
    # apt-get --no-install-recommends --yes install libimage-exiftool-perl
    - python3 -m pip install --upgrade pip setuptools wheel
    - pip --version
    # https://github.com/jbaiter/jpegtran-cffi/issues/27
    - pip install cffi
  script:
    - pip install .
    # First, run the unit tests
    - pytest-3 -l --pyargs plom
    # Build tests
    - mkdir play
    - pushd play
    - plom-server init
    - plom-server users --demo
    - plom-create new
    - plom-create parse
    - python3 -m plom.create.demotools
    - ip addr
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - plom-create class --demo -w 1234
    - plom-create make -w 1234
    - A=`ls papersToPrint/ | wc -l`  # How many files?
    - bash -c "[[ $A == 20 ]]"       # should be 20
    - python3 -m plom.create.exam_scribbler -w 1234
    # Scan and upload
    # supposed to fail:
    - if (plom-scan process); then false; else true; fi
    - plom-scan process -w 4567 fake_scribbled_exams1.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams1.pdf
    # TODO: I removed some -c lines here...
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams2.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams2.pdf
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams3.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams3.pdf
    - plom-scan status -w 4567
    # not supposed to be done yet:
    - if (plom-finish status -w 1234); then false; else true; fi
    - python3 -m plom.client.randoIDer -s localhost -u user0 -w 0123
    - python3 -m plom.client.randoMarker -s localhost -u user0 -w 0123
    - plom-finish status -w 1234
    - plom-finish csv -w 1234
    - A=`cat marks.csv  | wc -l`      # How many lines?
    - echo $A
    - A="$((A-1))"
    - bash -c "[[ $A == 19 ]]"        # b/c 1 page from 1 test is deleted
    - file marks.csv
    - file marks.csv | grep text
    - plom-finish reassemble -w 1234
    - A=`ls reassembled/ | wc -l`    # How many files?
    - bash -c "[[ $A == 19 ]]" # since 1 test incomplete
    - A=`du -sm reassembled/ | cut -f1`  # Don't regress on issue #627
    - bash -c "[[ $A -lt 40 ]]"          # not more than 10 MB
    - plom-finish webpage
    - A=`ls codedReturn/ | wc -l`    # How many files?
    - bash -c "[[ $A == 20 ]]"       # 20-1 pdf + 1 html
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd


# Ensure minimum listed dependency versions actually work on older system
# 1. oldest reasonably supported popular OS
# 2. take python deps from package manager
# 3. force the minimum version from setup.py
# Goal here is to catch changes that need newer features of a dependency.
nodock_mindeps:
  stage: build
  needs: []
  image: ubuntu:18.04
  before_script:
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata curl
    - apt-get --no-install-recommends --yes install
      cmake make g++ imagemagick openssl
      dvipng latexmk texlive-latex-extra texlive-fonts-recommended
      libpango-1.0-0 libpangocairo-1.0-0
      libzbar0
      libjpeg-dev libjpeg-turbo8-dev libturbojpeg0-dev
      libgl1-mesa-glx libsm6 libxrender1
      python3-pytest python3 python3-dev
      python3-pip python3-setuptools python3-wheel
      python3-cffi python3-passlib python3-pandas python3-pyqt5
      python3-requests-toolbelt python3-pil python3-tqdm
      python3-defusedxml python3-jsmin python3-packaging
      iproute2 psmisc file python3-magic
    - python3 -m pip install --upgrade pip
    # On 18.04, for pip < 19 upgrading is nontrivial: need `python3 -m pip`
    - python3 -m pip -V
    - python3 -m pip install --upgrade pip setuptools wheel
  script:
    - python3 -m pip install -r requirements.txt.tempminima
    - python3 -m pip install .
    # First, run the unit tests
    - pytest-3 -l --pyargs plom
    # Build tests
    - mkdir play
    - pushd play
    - plom-server init
    - plom-server users --demo
    - plom-create new
    - plom-create parse
    - python3 -m plom.create.demotools
    - ip addr
    - plom-server launch &
    - sleep 2
    - sleep 2
    - echo "Server should be in background"
    - jobs -l
    - echo "We should be able to connect to it"
    - curl -k https://localhost:41984/Version
    - plom-create class --demo -w 1234
    - plom-create make -w 1234
    - A=`ls papersToPrint/ | wc -l`  # How many files?
    - bash -c "[[ $A == 20 ]]"       # should be 20
    - python3 -m plom.create.exam_scribbler -w 1234
    # Scan and upload
    # supposed to fail:
    - if (plom-scan process); then false; else true; fi
    - plom-scan process -w 4567 fake_scribbled_exams1.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams1.pdf
    # TODO: I removed some -c lines here...
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams2.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams2.pdf
    - plom-scan status -w 4567
    - plom-scan process -w 4567 fake_scribbled_exams3.pdf
    - plom-scan upload -w 4567 -u fake_scribbled_exams3.pdf
    - plom-scan status -w 4567
    # not supposed to be done yet:
    - if (plom-finish status -w 1234); then false; else true; fi
    - python3 -m plom.client.randoIDer -s localhost -u user0 -w 0123
    - python3 -m plom.client.randoMarker -s localhost -u user0 -w 0123
    - plom-finish status -w 1234
    - plom-finish csv -w 1234
    - A=`cat marks.csv  | wc -l`      # How many lines?
    - echo $A
    - A="$((A-1))"
    - bash -c "[[ $A == 19 ]]"        # b/c 1 page from 1 test is deleted
    - file marks.csv
    - file marks.csv | grep text
    - plom-finish reassemble -w 1234
    - A=`ls reassembled/ | wc -l`    # How many files?
    - bash -c "[[ $A == 19 ]]" # since 1 test incomplete
    - A=`du -sm reassembled/ | cut -f1`  # Don't regress on issue #627
    - bash -c "[[ $A -lt 40 ]]"          # not more than 10 MB
    - plom-finish webpage
    - A=`ls codedReturn/ | wc -l`    # How many files?
    - bash -c "[[ $A == 20 ]]"       # 20-1 pdf + 1 html
    - echo "Now take down the server"
    # https://gitlab.com/gitlab-org/gitlab-runner/issues/2880
    - jobs -l
    - kill %1
    - sleep 2
    - echo "Should be no jobs and this should succeed"
    - jobs -l
    - popd


# upload binaries are generic gitlab packages
binary_upload:
  stage: prep
  image: curlimages/curl:latest
  rules:
   - if: $CI_COMMIT_TAG
  script:
    - ls
    - md5sum PlomClient*
    - |
      tee release_desc.md <<EOF
      *TODO* autogenerated release notes, needs manual editing

      ## Installation instructions

      Please see [plomgrading.org](https://plomgrading.org).
      If you're here looking for Clients, see "Compiled client" packages above.

      #### Changes in this release

      See [the Changelog](https://gitlab.com/plom/plom/-/blob/$CI_COMMIT_TAG/CHANGELOG.md).

      #### md5sum of compiled clients and other artifacts

      *TODO* indent four spaces
      *TODO* paste in pypi
      EOF
    - md5sum PlomClient* >> "release_desc.md"
    # strip the leading v in v0.x.y: don't see how to do this without dotenv
    - export VER=${CI_COMMIT_TAG:1}
    - echo $VER
    - export LINKNAME0="Compiled client for GNU/Linux (AppImage)"
    - export LINKNAME1="Compiled client for GNU/Linux (deprecated, compiled on Ubuntu 18.04)"
    - export LINKNAME2="Compiled client for GNU/Linux (deprecated, compiled on CentOS 7)"
    - export LINKNAME3="Compiled client for Windows"
    - export LINKNAME4="Compiled client for macOS (for macOS ≥ 11)"
    - export LINKNAME5="Compiled client for macOS (for macOS ≥ 10.14)"
    - export FILENAME0="PlomClient-$VER-x86_64.AppImage"
    - export FILENAME1="PlomClient-$VER-linux-ubuntu1804.bin"
    - export FILENAME2="PlomClient-$VER-linux-centos7.bin"
    - export FILENAME3="PlomClient-$VER.exe"
    - export FILENAME4="PlomClient-$VER-macos11.zip"
    - export FILENAME5="PlomClient-$VER-macos10_14.zip"
    - export URL0="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/PlomClient-linux/$VER/$FILENAME0"
    - export URL1="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/PlomClient-linux/$VER/$FILENAME1"
    - export URL2="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/PlomClient-linux/$VER/$FILENAME2"
    - export URL3="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/PlomClient-windows/$VER/$FILENAME3"
    - export URL4="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/PlomClient-macos/$VER/$FILENAME4"
    - export URL5="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/PlomClient-macos/$VER/$FILENAME5"
    - export OTHER_URL1="https://pypi.org/project/plom"
    - export OTHER_URL2="https://flathub.org/apps/details/org.plomgrading.PlomClient"
    - export OTHER_URL3="https://hub.docker.com/r/plomgrading/server"
    - export OTHER_LINKNAME1="Find Plom on PyPI"
    - export OTHER_LINKNAME2="Install Plom Client from Flathub (GNU/Linux)"
    - export OTHER_LINKNAME3="Plom Server on DockerHub"
    - echo "OTHER_URL1=$OTHER_URL1" >> release_info.env
    - echo "OTHER_URL2=$OTHER_URL2" >> release_info.env
    - echo "OTHER_URL3=$OTHER_URL3" >> release_info.env
    - echo "OTHER_LINKNAME1=$OTHER_LINKNAME1" >> release_info.env
    - echo "OTHER_LINKNAME2=$OTHER_LINKNAME2" >> release_info.env
    - echo "OTHER_LINKNAME3=$OTHER_LINKNAME3" >> release_info.env
    - echo "LINKNAME0=$LINKNAME0" >> release_info.env
    - echo "LINKNAME3=$LINKNAME3" >> release_info.env
    - echo "LINKNAME4=$LINKNAME4" >> release_info.env
    - echo "LINKNAME5=$LINKNAME5" >> release_info.env
    - echo "URL0=$URL0" >> release_info.env
    - echo "URL3=$URL3" >> release_info.env
    - echo "URL4=$URL4" >> release_info.env
    - echo "URL5=$URL5" >> release_info.env
    - echo "FILENAME0=$FILENAME0" >> release_info.env
    - echo "FILENAME3=$FILENAME3" >> release_info.env
    - echo "FILENAME4=$FILENAME4" >> release_info.env
    - echo "FILENAME5=$FILENAME5" >> release_info.env
    # actually do the uploads
    - |
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $FILENAME0 "$URL0"
    - |
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $FILENAME1 "$URL1"
    - |
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $FILENAME2 "$URL2"
    - |
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $FILENAME3 "$URL3"
    - |
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $FILENAME4 "$URL4"
    - |
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file $FILENAME5 "$URL5"
    # TODO: if the auto-asset push seems to be working, clean up this as we don't need to copy-paste
    - echo "" >> release_desc.md
    - echo "*TODO* still needed? copy-paste these links as release assets, type \"Package\"" >> release_desc.md
    - echo "" >> release_desc.md
    - echo "$URL0  $LINKNAME0" >> release_desc.md
    - echo "$URL1  $LINKNAME1" >> release_desc.md
    - echo "$URL2  $LINKNAME2" >> release_desc.md
    - echo "$URL3  $LINKNAME3" >> release_desc.md
    - echo "$URL4  $LINKNAME4" >> release_desc.md
    - echo "$URL5  $LINKNAME5" >> release_desc.md
    - echo "" >> release_desc.md
    - echo "*TODO* still needed? copy-paste these links as release assets, type \"Other\"" >> release_desc.md
    - echo "" >> release_desc.md
    - echo "$OTHER_URL1  $OTHER_LINKNAME1" >> release_desc.md
    - echo "$OTHER_URL2  $OTHER_LINKNAME2" >> release_desc.md
    - echo "$OTHER_URL3  $OTHER_LINKNAME3" >> release_desc.md
    - cat release_desc.md
  artifacts:
    paths:
      - release_desc.md
    reports:
      dotenv: release_info.env
    expire_in: 16 days


# Build Client Binaries
# These are run once tests pass: to change re-add `needs: []`

linux_client_appimage:
  stage: packaging
  script:
    - docker build --tag appimagebuilder_tmp -f AppImageBuilder.Containerfile .
    - docker create -ti --name dummy appimagebuilder_tmp bash
    # export VER=$(python3 -c "exec(open('plom/version.py').read()); print(__version__)")
    - export VER=`sed -nr 's/^__version__ = \"(.+)\"/\1/p' plom/version.py`
    - export NAME=PlomClient-$VER-x86_64.AppImage
    - docker cp dummy:/app/$NAME .
    - docker rm -f dummy
    - md5sum $NAME > md5sum
    - ls $NAME
    - cat md5sum
  artifacts:
    paths:
    - PlomClient*.AppImage
    - md5sum
    expire_in: 16 days


linuxbin_ubuntu1804:
  stage: packaging
  image: ubuntu:18.04
  before_script:
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata curl
    - apt-get --no-install-recommends --yes install iproute2 psmisc file binutils
      python3 python3-dev python3-wheel python3-setuptools python3-pip
    - apt-get install -y libglib2.0 qt5-default
    - pip3 install --upgrade pip
    - python3 -m pip install pyinstaller
    # On 18.04, for pip < 19 upgrading is nontrivial: need `python3 -m pip`
  script:
    # disable the pinned pillow as Python 3.6 not supported
    - sed -i "s/Pillow=/# Pillow=/" requirements.txt.client
    - python3 -m pip install -r requirements.txt.client
    - python3 -m pip install Pillow
    - pyinstaller client.linux.spec
    - export VER=$(python3 -c "exec(open('plom/version.py').read()); print(__version__)")
    - echo "Extracted version string '$VER'"
    - export NAME=PlomClient-$VER-linux-ubuntu1804.bin
    - mv dist/PlomClient*.bin $NAME
    - chmod 755 $NAME
    - md5sum $NAME > md5sum
    - ls $NAME
    - cat md5sum
  artifacts:
    paths:
    - PlomClient*.bin
    - md5sum
    expire_in: 16 days


linuxbin_ubuntu2004:
  stage: packaging
  image: ubuntu:20.04
  before_script:
    - apt-get update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata curl
    - apt-get --no-install-recommends --yes install iproute2 psmisc file binutils
      python3 python3-dev python3-wheel python3-setuptools python3-pip
    - apt-get install -y libglib2.0 qt5-default
    - pip install --upgrade pip
    - pip install pyinstaller
  script:
    - pip install -r requirements.txt.client
    - pyinstaller client.linux.spec
    - export VER=$(python3 -c "exec(open('plom/version.py').read()); print(__version__)")
    - echo "Extracted version string '$VER'"
    - export NAME=PlomClient-$VER-linux-ubuntu2004.bin
    - mv dist/PlomClient*.bin $NAME
    - chmod 755 $NAME
    - md5sum $NAME > md5sum
    - ls $NAME
    - cat md5sum
  artifacts:
    paths:
    - PlomClient*.bin
    - md5sum
    expire_in: 16 days


# TODO: consider doing only on the main branch and only when tests pass
linuxbin_centos:
  stage: packaging
  image: centos:7
  before_script:
    - yum install -y dnf
    - dnf update -y
    - dnf install -y python3 python3-wheel python3-setuptools python3-pip
    # Need deps for PyQt5/Qt/plugins/platforms/libqxcb.so, others, found with `ldd`
    - dnf install -y qt5-qtbase libxkbcommon-x11 libXcomposite
    - pip3 install --upgrade pip
    - python3 -m pip install pyinstaller
  script:
    # disable the pinned pillow as Python 3.6 not supported
    - sed -i "s/Pillow=/# Pillow=/" requirements.txt.client
    - python3 -m pip install -r requirements.txt.client
    - python3 -m pip install Pillow
    - pyinstaller client.linux.spec
    - export VER=$(python3 -c "exec(open('plom/version.py').read()); print(__version__)")
    - echo "Extracted version string '$VER'"
    - export NAME=PlomClient-$VER-linux-centos7.bin
    - mv dist/PlomClient*.bin $NAME
    - chmod 755 PlomClient*.bin
    - md5sum PlomClient*.bin > md5sum
    - ls $NAME
    - cat md5sum
  artifacts:
    paths:
    - PlomClient*.bin
    - md5sum
    expire_in: 16 days


# Notes on macOS client builds
# - build python from src for https://github.com/danhper/asdf-python/issues/38
# - macOS <= 10.14: older asdf, use `asdf local` not `asdf shell`
# - to get hardcoded path: verbose `pip install -v -v pyinstaller`
macos12_client:
  image: macos-12-xcode-13
  tags:
  - shared-macos-amd64
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: never
  - if: $CI_PROJECT_PATH == "plom/plom"
  stage: packaging
  script:
  - sw_vers
  - echo $SHELL
  - which python
  - python --version
  - pip --version
  - asdf current
  - python -m pip install --upgrade pip
  - pip --version
  - pip install -r requirements.txt.client
  - pip install pyinstaller
  - pyinstaller client.macos.spec
  - ls dist/
  - export VER=$(python3 -c "exec(open('plom/version.py').read()); print(__version__)")
  - echo "Extracted version string '$VER'"
  - export ZIPNAME=PlomClient-$VER-macos12.zip
  - pushd dist
  - ls
  - ls -sklR PlomClient-$VER.app
  - zip -r $ZIPNAME PlomClient-$VER.app
  - popd
  - mv dist/$ZIPNAME $ZIPNAME
  - md5 $ZIPNAME > md5sum
  - ls $ZIPNAME
  - cat md5sum
  artifacts:
    paths:
    - PlomClient*.zip
    - md5sum
    expire_in: 30 days

macos11_client:
  image: macos-11-xcode-12
  tags:
  - shared-macos-amd64
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: never
  - if: $CI_PROJECT_PATH == "plom/plom"
  stage: packaging
  script:
  - sw_vers
  - echo $SHELL
  - which python
  - python --version
  - pip --version
  - asdf current
  - asdf which python
  - asdf uninstall python 3.9.1
  - PYTHON_CONFIGURE_OPTS="--enable-framework" asdf install python 3.9.12
  - asdf which python
  - asdf shell python 3.9.12
  - python --version
  - pip --version
  - python -m pip install --upgrade pip
  - pip --version
  - pip install -r requirements.txt.client
  - pip install pyinstaller
  - /Users/gitlab/.asdf/installs/python/3.9.12/bin/pyinstaller client.macos.spec
  - ls dist/
  - export VER=$(python3 -c "exec(open('plom/version.py').read()); print(__version__)")
  - echo "Extracted version string '$VER'"
  - export ZIPNAME=PlomClient-$VER-macos11.zip
  - pushd dist
  - ls
  - ls -sklR PlomClient-$VER.app
  - zip -r $ZIPNAME PlomClient-$VER.app
  - popd
  - mv dist/$ZIPNAME $ZIPNAME
  - md5 $ZIPNAME > md5sum
  - ls $ZIPNAME
  - cat md5sum
  artifacts:
    paths:
    - PlomClient*.zip
    - md5sum
    expire_in: 16 days


# TODO: when: never versus manual
macos1015_client:
  image: macos-10.15-xcode-11
  tags:
  - shared-macos-amd64
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: never
  - if: $CI_PROJECT_PATH == "plom/plom"
  stage: packaging
  script:
  - sw_vers
  - echo $SHELL
  - which python
  - python --version
  - pip --version
  - asdf current
  - asdf which python
  - asdf uninstall python 3.8.0
  - PYTHON_CONFIGURE_OPTS="--enable-framework" asdf install python 3.9.12
  - asdf which python
  - asdf shell python 3.9.12
  - python --version
  - pip --version
  - python -m pip install --upgrade pip
  - pip --version
  - pip install -r requirements.txt.client
  - pip install pyinstaller
  - /Users/gitlab/.asdf/installs/python/3.9.12/bin/pyinstaller client.macos.spec
  - ls dist/
  - export VER=$(python3 -c "exec(open('plom/version.py').read()); print(__version__)")
  - echo "Extracted version string '$VER'"
  - export ZIPNAME=PlomClient-$VER-macos10_15.zip
  - pushd dist
  - ls
  - ls -sklR PlomClient-$VER.app
  - zip -r $ZIPNAME PlomClient-$VER.app
  - popd
  - mv dist/$ZIPNAME $ZIPNAME
  - md5 $ZIPNAME > md5sum
  - ls $ZIPNAME
  - cat md5sum
  artifacts:
    paths:
    - PlomClient*.zip
    - md5sum
    expire_in: 16 days


macos1014_client:
  image: macos-10.14-xcode-10
  tags:
  - shared-macos-amd64
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: never
  - if: $CI_PROJECT_PATH == "plom/plom"
  stage: packaging
  script:
  - sw_vers
  - echo $SHELL
  - asdf current
  # asdf which python  # has no python for some reason
  - PYTHON_CONFIGURE_OPTS="--enable-framework" asdf install python 3.9.12
  - asdf local python 3.9.12
  - asdf which python
  - python --version
  - pip --version
  - python -m pip install --upgrade pip
  - pip --version
  - pip install -r requirements.txt.client
  - pip install pyinstaller
  - /Users/gitlab/.asdf/installs/python/3.9.12/bin/pyinstaller client.macos.spec
  - ls dist/
  - export VER=$(python3 -c "exec(open('plom/version.py').read()); print(__version__)")
  - echo "Extracted version string '$VER'"
  - export ZIPNAME=PlomClient-$VER-macos10_14.zip
  - pushd dist
  - ls
  - ls -sklR PlomClient-$VER.app
  - zip -r $ZIPNAME PlomClient-$VER.app
  - popd
  - mv dist/$ZIPNAME $ZIPNAME
  - md5 $ZIPNAME > md5sum
  - ls $ZIPNAME
  - cat md5sum
  artifacts:
    paths:
    - PlomClient*.zip
    - md5sum
    expire_in: 16 days


macos1013_client:
  image: macos-10.13-xcode-9
  tags:
  - shared-macos-amd64
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: never
  - if: $CI_PROJECT_PATH == "plom/plom"
  stage: packaging
  script:
  - sw_vers
  - echo $SHELL
  - asdf current
  - asdf which python
  - PYTHON_CONFIGURE_OPTS="--enable-framework" asdf install python 3.9.12
  - asdf which python
  - asdf local python 3.9.12
  - python --version
  - pip --version
  - python -m pip install --upgrade pip
  - pip --version
  - pip install -r requirements.txt.client
  - pip install pyinstaller
  - /Users/gitlab/.asdf/installs/python/3.9.12/bin/pyinstaller client.macos.spec
  - ls dist/
  - export VER=$(python3 -c "exec(open('plom/version.py').read()); print(__version__)")
  - echo "Extracted version string '$VER'"
  - export ZIPNAME=PlomClient-$VER-macos10_13.zip
  - pushd dist
  - ls
  - ls -sklR PlomClient-$VER.app
  - zip -r $ZIPNAME PlomClient-$VER.app
  - popd
  - mv dist/$ZIPNAME $ZIPNAME
  - md5 $ZIPNAME > md5sum
  - ls $ZIPNAME
  - cat md5sum
  allow_failure: true
  artifacts:
    paths:
    - PlomClient*.zip
    - md5sum
    expire_in: 16 days


.shared_windows_runners:
  tags:
  - shared-windows
  - windows
  - windows-1809


winmintest:
  extends:
  - .shared_windows_runners
  stage: test
  needs: []
  script:
  - choco install -y python3 --version 3.9.12
  - refreshenv
  - c:\Python39\Scripts\pip install -r requirements.txt.client
  - refreshenv
  - echo $Env:Path
  - c:\Python39\python -m plom.client -h


# Build Windows client binaries
# This section written in PowerShell
winpyinst:
  extends:
  - .shared_windows_runners
  stage: packaging
  before_script:
  - choco install -y python3 --version 3.9.12
  - refreshenv
  - c:\python39\python -m pip --version
  - c:\python39\python -m pip install --user --upgrade pip
  - c:\python39\python -m pip --version
  - c:\python39\python -m pip install --user --upgrade setuptools wheel
  script:
  - c:\python39\python -m pip install -r requirements.txt.client
  # Delay pyinstaller for a month or so, sometimes output flagged as virus (Issue #1353)
  - c:\python39\python -m pip install pyinstaller==4.9
  - refreshenv
  - c:\python39\python -m plom.client -h
  - c:\python39\scripts\pyinstaller client.windows.spec
  - $VER = &"c:\python39\python" -c "exec(open('plom\\version.py').read()); print(__version__)"
  - echo "Extracted version string '$VER'"
  - $NAME = "PlomClient-$VER.exe"
  - move dist\PlomClient*.exe $NAME
  - CertUtil -hashfile $NAME MD5 > md5sum.txt
  - ls $NAME
  - type md5sum.txt
  artifacts:
    paths:
    - PlomClient*.exe
    - md5sum.txt
    expire_in: 16 days
